// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.Infrastructure.Context;

#nullable disable

namespace WebAPI.Migrations
{
    [DbContext(typeof(DoctorAppointmentSystemContext))]
    [Migration("20240227022858_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("WebAPI.Infrastructure.Context.AppDepartment", b =>
                {
                    b.Property<int>("Departmentid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DEPARTMENTID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Departmentid"), 1L, 1);

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime?>("Createddate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATEDDATE");

                    b.Property<bool>("Deletedflag")
                        .HasColumnType("bit")
                        .HasColumnName("DELETEDFLAG");

                    b.Property<string>("Departmentname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("DEPARTMENTNAME");

                    b.Property<string>("Updatedby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UPDATEDBY");

                    b.Property<DateTime?>("Updateddate")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATEDDATE");

                    b.HasKey("Departmentid");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Departmentid"), false);

                    b.ToTable("DEPARTMENTS", (string)null);
                });

            modelBuilder.Entity("WebAPI.Infrastructure.Context.Appointment", b =>
                {
                    b.Property<int>("Appointmentid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("APPOINTMENTID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Appointmentid"), 1L, 1);

                    b.Property<string>("Advicetopatient")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("ADVICETOPATIENT");

                    b.Property<string>("Appoimentstatus")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("APPOIMENTSTATUS");

                    b.Property<DateTime?>("Appointmentdate")
                        .HasColumnType("datetime")
                        .HasColumnName("APPOINTMENTDATE");

                    b.Property<string>("Casenote")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("CASENOTE");

                    b.Property<string>("Closedby")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("CLOSEDBY");

                    b.Property<DateTime?>("Closeddate")
                        .HasColumnType("datetime")
                        .HasColumnName("CLOSEDDATE");

                    b.Property<int>("Consultanttype")
                        .HasColumnType("int")
                        .HasColumnName("CONSULTANTTYPE");

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime?>("Createddate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATEDDATE");

                    b.Property<DateTime>("Dateofconsultation")
                        .HasColumnType("datetime")
                        .HasColumnName("DATEOFCONSULTATION");

                    b.Property<bool>("Deletedflag")
                        .HasColumnType("bit")
                        .HasColumnName("DELETEDFLAG");

                    b.Property<string>("Diagnosis")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("DIAGNOSIS");

                    b.Property<int>("Doctorid")
                        .HasColumnType("int")
                        .HasColumnName("DOCTORID");

                    b.Property<string>("Drugallergies")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("DRUGALLERGIES");

                    b.Property<string>("Existingillness")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("EXISTINGILLNESS");

                    b.Property<string>("Labtests")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("LABTESTS");

                    b.Property<int>("Modeofconsultant")
                        .HasColumnType("int")
                        .HasColumnName("MODEOFCONSULTANT");

                    b.Property<string>("Note")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("NOTE");

                    b.Property<int>("Patientid")
                        .HasColumnType("int")
                        .HasColumnName("PATIENTID");

                    b.Property<int>("Scheduleid")
                        .HasColumnType("int")
                        .HasColumnName("SCHEDULEID");

                    b.Property<string>("Symtoms")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("SYMTOMS");

                    b.Property<string>("Updatedby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UPDATEDBY");

                    b.Property<DateTime?>("Updateddate")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATEDDATE");

                    b.HasKey("Appointmentid");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Appointmentid"), false);

                    b.HasIndex(new[] { "Patientid" }, "RELATIONSHIP_13_FK");

                    b.HasIndex(new[] { "Doctorid", "Scheduleid" }, "RELATIONSHIP_14_FK");

                    b.ToTable("APPOINTMENT", (string)null);
                });

            modelBuilder.Entity("WebAPI.Infrastructure.Context.AppointmentPrescription", b =>
                {
                    b.Property<int>("Precriptionid")
                        .HasColumnType("int")
                        .HasColumnName("PRECRIPTIONID");

                    b.Property<int>("Appointmentid")
                        .HasColumnType("int")
                        .HasColumnName("APPOINTMENTID");

                    b.Property<string>("Note")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("NOTE");

                    b.HasKey("Precriptionid", "Appointmentid");

                    b.HasIndex(new[] { "Precriptionid" }, "RELATIONSHIP_12_FK");

                    b.HasIndex(new[] { "Appointmentid" }, "RELATIONSHIP_15_FK");

                    b.ToTable("APPOINTMENT_PRESCRIPTION", (string)null);
                });

            modelBuilder.Entity("WebAPI.Infrastructure.Context.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATEDDATE");

                    b.Property<bool>("DeletedFlag")
                        .HasColumnType("bit")
                        .HasColumnName("DELETEDFLAG");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UPDATEDBY");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATEDDATE");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("ROLE", (string)null);
                });

            modelBuilder.Entity("WebAPI.Infrastructure.Context.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("AVATARURL");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATEDDATE");

                    b.Property<bool>("DeletedFlag")
                        .HasColumnType("bit")
                        .HasColumnName("DELETEDFLAG");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .HasColumnName("EMAIL")
                        .IsFixedLength();

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Passwordrecoveryans1")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("PASSWORDRECOVERYANS1");

                    b.Property<string>("Passwordrecoveryans2")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("PASSWORDRECOVERYANS2");

                    b.Property<string>("Passwordrecoveryans3")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("PASSWORDRECOVERYANS3");

                    b.Property<int?>("Passwordrecoveryque1")
                        .HasColumnType("int")
                        .HasColumnName("PASSWORDRECOVERYQUE1");

                    b.Property<int?>("Passwordrecoveryque2")
                        .HasColumnType("int")
                        .HasColumnName("PASSWORDRECOVERYQUE2");

                    b.Property<int?>("Passwordrecoveryque3")
                        .HasColumnType("int")
                        .HasColumnName("PASSWORDRECOVERYQUE3");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("STATUS");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UPDATEDBY");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATEDDATE");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .HasColumnName("USERNAME")
                        .IsFixedLength();

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("USERTYPE");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex(new[] { "Email" }, "UQ__USER__161CF724976807CA")
                        .IsUnique()
                        .HasFilter("[EMAIL] IS NOT NULL");

                    b.ToTable("USER", (string)null);
                });

            modelBuilder.Entity("WebAPI.Infrastructure.Context.Doctor", b =>
                {
                    b.Property<int>("Doctorid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DOCTORID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Doctorid"), 1L, 1);

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime?>("Createddate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATEDDATE");

                    b.Property<bool>("Deletedflag")
                        .HasColumnType("bit")
                        .HasColumnName("DELETEDFLAG");

                    b.Property<int>("Departmentid")
                        .HasColumnType("int")
                        .HasColumnName("DEPARTMENTID");

                    b.Property<string>("Doctoraddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("DOCTORADDRESS");

                    b.Property<DateTime>("Doctordateofbirth")
                        .HasColumnType("date")
                        .HasColumnName("DOCTORDATEOFBIRTH");

                    b.Property<int>("Doctorgender")
                        .HasColumnType("int")
                        .HasColumnName("DOCTORGENDER");

                    b.Property<string>("Doctormobileno")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("DOCTORMOBILENO")
                        .IsFixedLength();

                    b.Property<string>("Doctorname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DOCTORNAME");

                    b.Property<string>("Doctornationalid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("DOCTORNATIONALID")
                        .IsFixedLength();

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("SPECIALITY");

                    b.Property<string>("Updatedby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UPDATEDBY");

                    b.Property<DateTime?>("Updateddate")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATEDDATE");

                    b.Property<string>("Userid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("USERID");

                    b.Property<DateTime>("Workingenddate")
                        .HasColumnType("date")
                        .HasColumnName("WORKINGENDDATE");

                    b.Property<DateTime>("Workingstartdate")
                        .HasColumnType("date")
                        .HasColumnName("WORKINGSTARTDATE");

                    b.HasKey("Doctorid");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Doctorid"), false);

                    b.HasIndex(new[] { "Departmentid" }, "RELATIONSHIP_20_FK");

                    b.HasIndex(new[] { "Userid" }, "RELATIONSHIP_22_FK");

                    b.HasIndex(new[] { "Doctornationalid" }, "UQ__DOCTOR__3CCC7AAE54D9074D")
                        .IsUnique();

                    b.ToTable("DOCTOR", (string)null);
                });

            modelBuilder.Entity("WebAPI.Infrastructure.Context.Log", b =>
                {
                    b.Property<int>("Logid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LOGID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Logid"), 1L, 1);

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime?>("Createddate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATEDDATE");

                    b.Property<string>("Eventcatg")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("EVENTCATG");

                    b.Property<string>("Eventmsg")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("EVENTMSG");

                    b.Property<string>("Eventsrc")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("EVENTSRC");

                    b.Property<string>("Eventtype")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("EVENTTYPE");

                    b.HasKey("Logid");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Logid"), false);

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("WebAPI.Infrastructure.Context.Patient", b =>
                {
                    b.Property<int>("Patientid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PATIENTID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Patientid"), 1L, 1);

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime?>("Createddate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATEDDATE");

                    b.Property<bool>("Deletedflag")
                        .HasColumnType("bit")
                        .HasColumnName("DELETEDFLAG");

                    b.Property<string>("Patientaddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("PATIENTADDRESS");

                    b.Property<DateTime>("Patientdateofbirth")
                        .HasColumnType("date")
                        .HasColumnName("PATIENTDATEOFBIRTH");

                    b.Property<int>("Patientgender")
                        .HasColumnType("int")
                        .HasColumnName("PATIENTGENDER");

                    b.Property<string>("Patientmobileno")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("PATIENTMOBILENO")
                        .IsFixedLength();

                    b.Property<string>("Patientname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PATIENTNAME");

                    b.Property<string>("Patientnationalid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("PATIENTNATIONALID")
                        .IsFixedLength();

                    b.Property<string>("Updatedby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UPDATEDBY");

                    b.Property<DateTime?>("Updateddate")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATEDDATE");

                    b.Property<string>("Userid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("USERID");

                    b.HasKey("Patientid");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Patientid"), false);

                    b.HasIndex(new[] { "Userid" }, "RELATIONSHIP_19_FK");

                    b.HasIndex(new[] { "Patientnationalid" }, "UQ__PATIENT__D90C4BCF974EE727")
                        .IsUnique();

                    b.ToTable("PATIENT", (string)null);
                });

            modelBuilder.Entity("WebAPI.Infrastructure.Context.Prescription", b =>
                {
                    b.Property<int>("Precriptionid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PRECRIPTIONID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Precriptionid"), 1L, 1);

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime?>("Createddate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATEDDATE");

                    b.Property<bool>("Deletedflag")
                        .HasColumnType("bit")
                        .HasColumnName("DELETEDFLAG");

                    b.Property<string>("Drug")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("DRUG");

                    b.Property<int>("Frequency")
                        .HasColumnType("int")
                        .HasColumnName("FREQUENCY");

                    b.Property<string>("Medicationdays")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MEDICATIONDAYS");

                    b.Property<string>("Note")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("NOTE");

                    b.Property<string>("Patientname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PATIENTNAME");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("QUANTITY");

                    b.Property<int?>("Unit")
                        .HasColumnType("int")
                        .HasColumnName("UNIT");

                    b.Property<string>("Updatedby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UPDATEDBY");

                    b.Property<DateTime?>("Updateddate")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATEDDATE");

                    b.HasKey("Precriptionid");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Precriptionid"), false);

                    b.ToTable("PRESCRIPTION", (string)null);
                });

            modelBuilder.Entity("WebAPI.Infrastructure.Context.Schedule", b =>
                {
                    b.Property<int>("Doctorid")
                        .HasColumnType("int")
                        .HasColumnName("DOCTORID");

                    b.Property<int>("Scheduleid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SCHEDULEID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Scheduleid"), 1L, 1);

                    b.Property<TimeSpan>("Breaktime")
                        .HasColumnType("time")
                        .HasColumnName("BREAKTIME");

                    b.Property<int>("Consultanttime")
                        .HasColumnType("int")
                        .HasColumnName("CONSULTANTTIME");

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime?>("Createddate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATEDDATE");

                    b.Property<bool>("Deletedflag")
                        .HasColumnType("bit")
                        .HasColumnName("DELETEDFLAG");

                    b.Property<TimeSpan>("Shifttime")
                        .HasColumnType("time")
                        .HasColumnName("SHIFTTIME");

                    b.Property<string>("Updatedby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UPDATEDBY");

                    b.Property<DateTime?>("Updateddate")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATEDDATE");

                    b.Property<DateTime>("Workingday")
                        .HasColumnType("date")
                        .HasColumnName("WORKINGDAY");

                    b.HasKey("Doctorid", "Scheduleid");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Doctorid", "Scheduleid"), false);

                    b.HasIndex(new[] { "Doctorid" }, "RELATIONSHIP_7_FK");

                    b.ToTable("SCHEDULE", (string)null);
                });

            modelBuilder.Entity("WebAPI.Infrastructure.Context.SystemPara", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Createdby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CREATEDBY");

                    b.Property<DateTime?>("Createddate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATEDDATE");

                    b.Property<bool?>("Deletedflag")
                        .HasColumnType("bit")
                        .HasColumnName("DELETEDFLAG");

                    b.Property<string>("Groupid")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("GROUPID");

                    b.Property<string>("Note")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("NOTE");

                    b.Property<string>("Paraid")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("PARAID");

                    b.Property<string>("Paraval")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("PARAVAL");

                    b.Property<string>("Updatedby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UPDATEDBY");

                    b.Property<DateTime?>("Updateddate")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATEDDATE");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.ToTable("SYSTEM_PARA", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("WebAPI.Infrastructure.Context.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebAPI.Infrastructure.Context.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebAPI.Infrastructure.Context.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("WebAPI.Infrastructure.Context.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Infrastructure.Context.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebAPI.Infrastructure.Context.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAPI.Infrastructure.Context.Appointment", b =>
                {
                    b.HasOne("WebAPI.Infrastructure.Context.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("Patientid")
                        .IsRequired()
                        .HasConstraintName("FK_APPOINTM_RELATIONS_PATIENT");

                    b.HasOne("WebAPI.Infrastructure.Context.Schedule", "Schedule")
                        .WithMany("Appointments")
                        .HasForeignKey("Doctorid", "Scheduleid")
                        .IsRequired()
                        .HasConstraintName("FK_APPOINTM_RELATIONS_SCHEDULE");

                    b.Navigation("Patient");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("WebAPI.Infrastructure.Context.AppointmentPrescription", b =>
                {
                    b.HasOne("WebAPI.Infrastructure.Context.Appointment", "Appointment")
                        .WithMany("AppointmentPrescriptions")
                        .HasForeignKey("Appointmentid")
                        .IsRequired()
                        .HasConstraintName("FK_APPOINTM_RELATIONS_APPOINTM");

                    b.HasOne("WebAPI.Infrastructure.Context.Prescription", "Precription")
                        .WithMany("AppointmentPrescriptions")
                        .HasForeignKey("Precriptionid")
                        .IsRequired()
                        .HasConstraintName("FK_APPOINTM_RELATIONS_PRESCRIP");

                    b.Navigation("Appointment");

                    b.Navigation("Precription");
                });

            modelBuilder.Entity("WebAPI.Infrastructure.Context.Doctor", b =>
                {
                    b.HasOne("WebAPI.Infrastructure.Context.AppDepartment", "Department")
                        .WithMany("Doctors")
                        .HasForeignKey("Departmentid")
                        .IsRequired()
                        .HasConstraintName("FK_DOCTOR_RELATIONS_DEPARTME");

                    b.HasOne("WebAPI.Infrastructure.Context.AppUser", "User")
                        .WithMany("Doctors")
                        .HasForeignKey("Userid")
                        .IsRequired()
                        .HasConstraintName("FK_DOCTOR_RELATIONS_USER");

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAPI.Infrastructure.Context.Patient", b =>
                {
                    b.HasOne("WebAPI.Infrastructure.Context.AppUser", "User")
                        .WithMany("Patients")
                        .HasForeignKey("Userid")
                        .IsRequired()
                        .HasConstraintName("FK_PATIENT_RELATIONS_USER");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAPI.Infrastructure.Context.Schedule", b =>
                {
                    b.HasOne("WebAPI.Infrastructure.Context.Doctor", "Doctor")
                        .WithMany("Schedules")
                        .HasForeignKey("Doctorid")
                        .IsRequired()
                        .HasConstraintName("FK_SCHEDULE_RELATIONS_DOCTOR");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("WebAPI.Infrastructure.Context.AppDepartment", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("WebAPI.Infrastructure.Context.Appointment", b =>
                {
                    b.Navigation("AppointmentPrescriptions");
                });

            modelBuilder.Entity("WebAPI.Infrastructure.Context.AppUser", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("WebAPI.Infrastructure.Context.Doctor", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("WebAPI.Infrastructure.Context.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("WebAPI.Infrastructure.Context.Prescription", b =>
                {
                    b.Navigation("AppointmentPrescriptions");
                });

            modelBuilder.Entity("WebAPI.Infrastructure.Context.Schedule", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
